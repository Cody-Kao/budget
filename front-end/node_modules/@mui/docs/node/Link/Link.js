"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Link = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _clsx = _interopRequireDefault(require("clsx"));
var _router = require("next/router");
var _link = _interopRequireDefault(require("next/link"));
var _Link = _interopRequireDefault(require("@mui/material/Link"));
var _styles = require("@mui/material/styles");
var _i18n = require("../i18n");
var _DocsProvider = require("../DocsProvider");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["to", "linkAs", "replace", "scroll", "shallow", "prefetch", "legacyBehavior", "locale"],
  _excluded2 = ["activeClassName", "as", "className", "href", "legacyBehavior", "linkAs", "locale", "noLinkStyle", "prefetch", "replace", "role", "scroll", "shallow"];
/**
 * File to keep in sync with:
 *
 * - /docs/src/modules/components/Link.tsx
 * - /examples/material-ui-nextjs-pages-router/src/Link.js
 * - /examples/material-ui-nextjs-pages-router-ts/src/Link.tsx
 */
// Add support for the sx prop for consistency with the other branches.
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const Anchor = (0, _styles.styled)('a')({});
const NextLinkComposed = /*#__PURE__*/React.forwardRef(function NextLinkComposed(props, ref) {
  const {
      to,
      linkAs,
      replace,
      scroll,
      shallow,
      prefetch,
      legacyBehavior = true,
      locale
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_link.default, {
    href: to,
    prefetch: prefetch,
    as: linkAs,
    replace: replace,
    scroll: scroll,
    shallow: shallow,
    passHref: true,
    locale: locale,
    legacyBehavior: legacyBehavior,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(Anchor, (0, _extends2.default)({
      "data-no-markdown-link": "true",
      ref: ref
    }, other))
  });
});
// A styled version of the Next.js Pages Router Link component:
// https://nextjs.org/docs/pages/api-reference/components/link
const Link = exports.Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {
  const {
      activeClassName = 'active',
      as,
      className: classNameProps,
      href,
      legacyBehavior,
      linkAs: linkAsProp,
      locale,
      noLinkStyle,
      prefetch,
      replace,
      // Link don't have roles.
      scroll,
      shallow
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded2);
  const router = (0, _router.useRouter)();
  const pathname = typeof href === 'string' ? href : href == null ? void 0 : href.pathname;
  const routerPathname = router.pathname.replace('/[docsTab]', '');
  const shouldBeActive = routerPathname === pathname;
  const className = (0, _clsx.default)(classNameProps, shouldBeActive && activeClassName);
  const userLanguage = (0, _i18n.useUserLanguage)();
  const {
    LANGUAGES_IGNORE_PAGES
  } = (0, _DocsProvider.useDocsConfig)();
  let linkAs = linkAsProp || as || href;
  if (userLanguage !== 'en' && pathname && pathname.indexOf('/') === 0 && !LANGUAGES_IGNORE_PAGES(pathname) && !pathname.startsWith(`/${userLanguage}/`)) {
    linkAs = `/${userLanguage}${linkAs}`;
  }
  const nextjsProps = {
    to: href,
    linkAs,
    replace,
    scroll,
    shallow,
    legacyBehavior,
    prefetch,
    locale
  };
  if (noLinkStyle) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(NextLinkComposed, (0, _extends2.default)({
      className: className,
      ref: ref
    }, nextjsProps, other));
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_Link.default, (0, _extends2.default)({
    component: NextLinkComposed,
    className: className,
    ref: ref
  }, nextjsProps, other));
});